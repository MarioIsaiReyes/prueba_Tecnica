package com.mario.reyes.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.mario.reyes.demo.entidad.entidadUsuario;
import com.mario.reyes.demo.entidad.usuarioRepositorio;

@RestController
@RequestMapping("/api/usuarios")
public class usuarioController {
	
	@Autowired
    private usuarioRepositorio usuariorepositorio;
	
    @PostMapping
    public entidadUsuario crearUsuario(@RequestBody entidadUsuario usuario) {
        return usuariorepositorio.save(usuario);
    }

    @GetMapping
    public List<entidadUsuario> obtenerUsuarios() {
        return usuariorepositorio.findAll();
    }

    @GetMapping("/{id}")
    public ResponseEntity<entidadUsuario> obtenerUsuarioPorId(@PathVariable Long id) {
        Optional<entidadUsuario> usuario = usuariorepositorio.findById(id);
        if (usuario.isPresent()) {
            return ResponseEntity.ok(usuario.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<entidadUsuario> actualizarUsuario(@PathVariable Long id, @RequestBody entidadUsuario usuarioNuevo) {
        Optional<entidadUsuario> usuarioExistente = usuariorepositorio.findById(id);
        if (usuarioExistente.isPresent()) {
        	entidadUsuario usuario = usuarioExistente.get();
            usuario.setNombre(usuarioNuevo.getNombre());
            usuario.setApellido(usuarioNuevo.getApellido());
            usuario.setCorreo(usuarioNuevo.getCorreo());
            usuario.setFechaNacimiento(usuarioNuevo.getFechaNacimiento());
            usuariorepositorio.save(usuario);
            return ResponseEntity.ok(usuario);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> eliminarUsuario(@PathVariable Long id) {
        Optional<entidadUsuario> usuario = usuariorepositorio.findById(id);
        if (usuario.isPresent()) {
        	usuariorepositorio.deleteById(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}